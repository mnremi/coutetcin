// Import de la bibliothèque sonore, déclaration de variables sons
import ddf.minim.*;
Minim minim;
AudioSnippet son_boom;
AudioSnippet son_tirs;
AudioSnippet son_click;
AudioSnippet son_musique;
AudioSnippet son_musique_enervee;

// Liste de boolean contenant l'état des touches 'e', 'c' et ' '
boolean keys[];

// Variables utilitaires
int frame, seconde, frame_sprite;
int v_boucle, a_boucle, titre_boucle, affichageniveau_boucle, choixniveau_boucle;

// Instanciations des ArrayList de classes
ArrayList<Assaillant> assaillants = new ArrayList<Assaillant>();
ArrayList<Vaisseau> vaisseau = new ArrayList<Vaisseau>();
ArrayList<Tir> tirs = new ArrayList<Tir>();

// Instanciation des paternes de niveaux
int niveau = 1, objectif = 1, j;
int[] pattern_n = new int[900];
int[] pattern_n01 = new int[30];  // 10
int[] pattern_n02 = new int[45];  // 15
int[] pattern_n03 = new int[60];  // 20
int[] pattern_n04 = new int[75];  // 25
int[] pattern_n05 = new int[90];  // 30
int[] pattern_n06 = new int[105]; // 35
int[] pattern_n07 = new int[120]; // 40
int[] pattern_n08 = new int[150]; // 50
int[] pattern_n09 = new int[180]; // 60
int[] pattern_n10 = new int[210]; // 70
int[] pattern_n11 = new int[240]; // 80
int[] pattern_n12 = new int[270]; // 90
int[] pattern_n13 = new int[315]; // 105
int[] pattern_n14 = new int[345]; // 115
int[] pattern_n15 = new int[390]; // 130
int[] pattern_n16 = new int[450]; // 150
int[] pattern_n17 = new int[495]; // 165
int[] pattern_n18 = new int[555]; // 185
int[] pattern_n19 = new int[600]; // 200
int[] pattern_n20 = new int[900]; // 300

// Initalisation des variables sur lesquelles se calqueront les paternes
int[] pattern01 = {1, 2, 1, 2, 2, 4, 3, 3, 2, 4, 1, 3, 4, 2, 1, 4, 6, 4, 3, 2, 6, 4, 1, 2, 7, 2, 1, 3, 7, 4, 3, 3, 7, 4, 1, 3, 10, 2, 1, 5};
int[] pattern02 = {1, 4, 3, 2, 1, 4, 1, 2, 4, 2, 1, 6, 5, 2, 1, 3, 5, 4, 3, 3, 5, 4, 1, 3, 8, 4, 3, 2, 8, 4, 1, 2, 10, 6, 2, 3, 10, 6, 3, 3, 10, 6, 4, 3, 10, 6, 5, 3, 13, 4, 3, 3, 13, 4, 1, 3, 15, 2, 1, 5}; // 2132421
int[] pattern03 = {2, 2, 1, 4, 4, 4, 3, 3, 4, 4, 1, 3, 6, 2, 1, 3, 6, 4, 3, 3, 6, 4, 1, 3, 9, 6, 2, 4, 9, 6, 3, 4, 9, 6, 4, 4, 9, 6, 5, 4, 13, 2, 1, 3, 13, 4, 3, 3, 13, 4, 1, 3, 15, 4, 3, 5, 15, 4, 1, 5, 18, 2, 1, 6, 20, 4, 3, 4, 20, 4, 1, 4, 22, 4, 3, 5, 2, 4, 1, 5}; // 123432122
int[] pattern04 = {1, 4, 3, 3, 1, 4, 1, 3, 3, 2, 1, 3, 3, 4, 3, 3, 3, 4, 1, 3, 5, 4, 3, 4, 5, 4, 1, 4, 8, 2, 1, 3, 8, 4, 3, 3, 8, 4, 1, 3, 11, 6, 2, 4, 11, 6, 3, 4, 11, 11, 4, 4, 11, 6, 5, 4, 14, 2, 1, 7, 16, 4, 3, 4, 16, 4, 1, 4, 19, 2, 1, 3, 20, 4, 3, 3, 20, 4, 1, 3, 22, 2, 1, 6, 22, 4, 3, 6, 22, 4, 1, 6, 24, 4, 3, 5, 24, 4, 1, 5};
int[] pattern05 = {1, 2, 1, 3, 2, 4, 3, 3, 2, 4, 1, 3, 4, 2, 1, 3, 4, 4, 3, 3, 4, 4, 1, 3, 6, 6, 2, 4, 6, 6, 3, 4, 6, 6, 4, 4, 6, 6, 5, 4, 9, 2, 1, 3, 9, 4, 3, 3, 9, 4, 1, 3, 12, 4, 3, 5, 12, 4, 1, 5, 14, 2, 1, 8, 16, 4, 3, 4, 16, 4, 1, 4, 18, 4, 3, 5, 18, 4, 1, 5, 20, 2, 1, 5, 21, 4, 3, 4, 21, 4, 1, 4, 22, 2, 1, 6, 22, 4, 3, 6, 22, 4, 1, 6, 24, 2, 1, 7, 24, 4, 3, 7, 24, 4, 1, 7, 26, 2, 1, 8};
int[] pattern06 = {1, 4, 3, 4, 1, 4, 1, 4, 3, 2, 1, 4, 3, 4, 3, 4, 4, 4, 1, 4, 5, 4, 3, 5, 5, 4, 1, 5, 8, 2, 1, 5, 8, 4, 3, 5, 8, 4, 1, 5, 11, 6, 2, 5, 11, 6, 3, 5, 11, 11, 4, 5, 11, 6, 5, 5, 14, 2, 1, 9, 16, 4, 3, 5, 16, 4, 1, 5, 19, 2, 1, 4, 20, 4, 3, 4, 20, 4, 1, 4, 22, 2, 1, 7, 22, 4, 3, 7, 22, 4, 1, 7, 24, 4, 3, 6, 24, 4, 1, 6, 25, 2, 1, 7, 27, 4, 3, 5, 27, 4, 1, 5, 29, 2, 1, 9, 30, 4, 3, 5, 30, 4, 1, 5, 32, 2, 1, 4, 32, 4, 3, 4, 32, 4, 1, 4, 33, 2, 1, 10};
int[] pattern07 = {};
int[] pattern08 = {1, 4, 1, 6, 1, 4, 3, 6, 1, 2, 1, 6, 3, 2, 1, 12, 4, 2, 1, 10, 5, 2, 1, 12, 6, 2, 1, 9, 7, 2, 1, 9, 8, 2, 1, 11, 9, 4, 1, 7, 9, 4, 3, 7, 9, 2, 1, 7, 11, 6, 2, 6, 11, 6, 3, 6, 11, 6, 4, 6, 11, 6, 5, 6, 14, 2, 1, 11, 15, 4, 1, 5, 15, 4, 3, 5, 15, 2, 1, 5, 17, 4, 1, 7, 17, 4, 3, 7, 17, 2, 1, 7, 19, 4, 1, 7, 19, 4, 3, 7, 19, 2, 1, 7, 21, 4, 1, 6, 21, 4, 3, 6, 23, 2, 1, 9, 24, 4, 1, 7, 24, 4, 3, 7, 24, 2, 1, 7, 26, 2, 1, 8, 27, 4, 1, 6, 27, 4, 3, 6, 27, 2, 1, 6, 29, 4, 1, 6, 29, 4, 3, 6, 29, 2, 1, 6, 31, 2, 1, 8, 32, 2, 1, 11, 33, 4, 1, 5, 33, 4, 3, 5, 33, 2, 1, 5, 35, 4, 1, 6, 35, 4, 3, 6, 35, 2, 1, 6, 37, 6, 2, 6, 37, 6, 3, 6, 37, 6, 4, 6};
int[] pattern09 = {1, 4, 1, 8, 1, 4, 3, 8, 3, 6, 2, 6, 3, 6, 3, 6, 3, 6, 4, 6, 3, 6, 5, 6, 6, 4, 1, 8, 6, 4, 3, 8, 6, 2, 1, 8, 8, 2, 1, 11, 9, 2, 1, 12, 10, 6, 2, 7, 10, 6, 3, 7, 10, 6, 4, 7, 10, 6, 5, 7, 13, 4, 1, 6, 13, 4, 3, 6, 13, 2, 1, 6, 15, 4, 1, 7, 15, 4, 3, 7, 17, 2, 1, 12, 18, 4, 1, 9, 18, 4, 3, 9, 20, 4, 1, 8, 20, 4, 3, 8, 20, 2, 1, 8, 22, 4, 1, 8, 22, 4, 3, 8, 22, 2, 1, 8, 24, 2, 1, 11, 25, 4, 1, 7, 25, 4, 3, 7, 25, 2, 1, 7, 27, 6, 2, 7, 27, 6, 3, 7, 27, 6, 4, 7, 27, 6, 5, 7, 30, 4, 1, 7, 30, 4, 3, 7, 32, 6, 2, 7, 32, 6, 3, 7, 32, 6, 4, 7, 32, 6, 5, 7, 35, 4, 1, 8, 35, 4, 3, 8, 35, 2, 1, 8, 37, 6, 2, 6, 37, 6, 3, 6, 37, 6, 4, 6, 37, 6, 5, 6, 40, 6, 2, 7, 40, 6, 3, 7, 40, 6, 4, 7, 40, 6, 5, 7, 43, 2, 1, 12, 44, 6, 2, 7, 44, 6, 3, 7, 44, 6, 4, 7, 44, 6, 5, 7, 47, 2, 1, 12};
int[] pattern10 = {1, 4, 1, 8, 1, 4, 3, 8, 3, 6, 2, 7, 3, 6, 3, 7, 3, 6, 4, 7, 3, 6, 5, 7, 6, 2, 1, 10, 7, 6, 2, 7, 7, 6, 3, 7, 7, 6, 4, 7, 7, 6, 5, 7, 10, 6, 2, 8, 10, 6, 3, 8, 10, 6, 4, 8, 10, 6, 5, 8, 13, 4, 1, 7, 13, 4, 3, 7, 13, 2, 1, 7, 15, 4, 1, 7, 15, 4, 3, 7, 15, 2, 1, 7, 17, 4, 1, 9, 17, 4, 3, 9, 19, 4, 1, 8, 19, 4, 3, 8, 21, 4, 1, 8, 21, 4, 3, 8, 23, 4, 1, 9, 23, 4, 3, 9, 25, 2, 1, 10, 26, 4, 1, 8, 26, 4, 3, 8, 28, 6, 2, 8, 28, 6, 3, 8, 28, 6, 4, 8, 28, 6, 5, 8, 31, 6, 2, 8, 31, 6, 3, 8, 31, 6, 4, 8, 31, 6, 5, 8, 34, 6, 2, 7, 34, 6, 3, 7, 34, 6, 4, 7, 34, 6, 5, 7, 37, 4, 1, 8, 37, 4, 3, 8, 37, 2, 1, 8, 39, 4, 1, 8, 39, 4, 3, 8, 41, 4, 1, 9, 41, 4, 3, 9, 43, 4, 1, 9, 43, 4, 3, 9, 45, 4, 1, 8, 45, 4, 3, 8, 47, 6, 2, 7, 47, 6, 3, 7, 47, 6, 4, 7, 47, 6, 5, 7, 50, 4, 1, 7, 50, 4, 3, 7, 50, 2, 1, 7, 52, 6, 2, 8, 52, 6, 3, 8, 52, 6, 4, 8, 52, 6, 5, 8, 55, 6, 2, 8, 55, 6, 3, 8, 55, 6, 4, 8, 55, 6, 5, 8};
int[] pattern11 = {1, 2, 1, 13, 2, 2, 1, 11, 3, 4, 1, 8, 3, 4, 3, 8, 3, 2, 1, 8, 5, 4, 1, 7, 5, 4, 3, 7, 5, 2, 1, 7, 7, 6, 2, 7, 7, 6, 3, 7, 7, 6, 4, 7, 7, 6, 5, 7, 10, 4, 1, 8, 10, 4, 3, 8, 10, 2, 1, 8, 12, 6, 2, 8, 12, 6, 3, 8, 12, 6, 4, 8, 12, 6, 5, 8, 15, 6, 2, 8, 15, 6, 3, 8, 15, 6, 4, 8, 15, 6, 5, 8, 18, 4, 1, 7, 18, 4, 3, 7, 18, 2, 1, 7, 20, 4, 1, 8, 20, 4, 3, 8, 20, 2, 1, 8, 22, 4, 1, 9, 22, 4, 3, 9, 23, 2, 1, 12, 24, 4, 1, 9, 24, 4, 3, 9, 25, 4, 1, 9, 25, 4, 3, 9, 26, 4, 1, 8, 26, 4, 3, 8, 26, 2, 1, 8, 28, 2, 1, 11, 29, 2, 1, 15, 30, 6, 2, 8, 30, 6, 3, 8, 30, 6, 4, 8, 30, 6, 5, 8, 33, 4, 1, 9, 33, 4, 3, 9, 34, 6, 2, 8, 34, 6, 3, 8, 34, 6, 4, 8, 34, 6, 5, 8, 37, 2, 1, 13, 38, 4, 1, 8, 38, 4, 3, 8, 38, 2, 1, 8, 40, 2, 1, 11, 41, 4, 1, 8, 41, 4, 3, 8, 42, 4, 1, 8, 42, 4, 3, 8, 43, 6, 2, 7, 43, 6, 3, 7, 43, 6, 4, 7, 43, 6, 5, 7, 46, 2, 1, 11, 47, 4, 1, 7, 47, 4, 3, 7, 47, 2, 1, 7, 49, 6, 2, 8, 49, 6, 3, 8, 49, 6, 4, 8, 49, 6, 5, 8, 52, 4, 1, 8, 52, 4, 3, 8, 53, 6, 2, 7, 53, 6, 3, 7, 53, 6, 4, 7, 53, 6, 5, 7, 56, 4, 1, 7, 56, 4, 3, 7};
int[] pattern12 = {1, 4, 1, 9, 1, 4, 3, 9, 1, 2, 1, 9, 3, 4, 1, 8, 3, 4, 3, 8, 3, 2, 1, 8, 5, 6, 2, 7, 5, 6, 3, 7, 5, 6, 4, 7, 5, 6, 5, 7, 8, 2, 1, 12, 9, 4, 1, 8, 9, 4, 3, 8, 9, 2, 1, 8, 11, 6, 2, 8, 11, 6, 3, 8, 11, 6, 4, 8, 11, 6, 5, 8, 14, 6, 2, 7, 14, 6, 3, 7, 14, 6, 4, 7, 14, 6, 5, 7, 17, 2, 1, 15, 18, 4, 1, 8, 18, 4, 3, 8, 18, 2, 1, 8, 20, 6, 2, 7, 20, 6, 3, 7, 20, 6, 4, 7, 20, 6, 5, 7, 23, 4, 1, 9, 23, 4, 3, 9, 24, 6, 2, 8, 24, 6, 3, 8, 24, 6, 4, 8, 24, 6, 5, 8, 27, 4, 1, 9, 27, 4, 3, 9, 28, 6, 2, 8, 28, 6, 3, 8, 28, 6, 4, 8, 28, 6, 5, 8, 31, 6, 2, 7, 31, 6, 3, 7, 31, 6, 4, 7, 31, 6, 5, 7, 34, 4, 1, 8, 34, 4, 3, 8, 34, 2, 1, 8, 36, 6, 2, 7, 36, 6, 3, 7, 36, 6, 4, 7, 36, 6, 5, 7, 39, 2, 1, 12, 40, 4, 1, 8, 40, 4, 3, 8, 40, 2, 1, 8, 42, 4, 1, 8, 42, 4, 3, 8, 42, 2, 1, 8, 44, 6, 2, 7, 44, 6, 3, 7, 44, 6, 4, 7, 44, 6, 5, 7, 47, 2, 1, 15, 48, 4, 1, 8, 48, 4, 3, 8, 48, 2, 1, 8, 50, 2, 1, 15, 51, 2, 1, 15, 52, 6, 2, 8, 52, 6, 3, 8, 52, 6, 4, 8, 52, 6, 5, 8, 55, 6, 2, 7, 55, 6, 3, 7, 55, 6, 4, 7, 55, 6, 5, 7, 58, 4, 1, 9, 58, 4, 3, 9, 58, 2, 1, 9, 60, 4, 1, 9, 60, 4, 3, 9, 61, 4, 1, 8, 61, 4, 3, 8, 61, 2, 1, 8, 63, 4, 1, 9, 63, 4, 3, 9, 64, 4, 1, 8, 64, 4, 3, 8};
int[] pattern13 = {1, 2, 1, 15, 2, 4, 1, 11, 2, 4, 3, 11, 3, 4, 1, 11, 3, 4, 3, 11, 4, 4, 1, 11, 4, 4, 3, 11, 5, 2, 1, 13, 6, 2, 1, 14, 7, 4, 1, 10, 7, 4, 3, 10, 7, 2, 1, 10, 9, 6, 2, 7, 9, 6, 3, 7, 9, 6, 4, 7, 9, 6, 5, 7, 12, 6, 2, 7, 12, 6, 3, 7, 12, 6, 4, 7, 12, 6, 5, 7, 15, 6, 2, 7, 15, 6, 3, 7, 15, 6, 4, 7, 15, 6, 5, 7, 18, 2, 1, 14, 19, 2, 1, 15, 20, 6, 2, 7, 20, 6, 3, 7, 20, 6, 4, 7, 20, 6, 5, 7, 23, 4, 1, 9, 23, 4, 3, 9, 23, 2, 1, 9, 25, 2, 1, 14, 26, 2, 1, 15, 27, 2, 1, 13, 28, 2, 1, 14, 29, 4, 1, 9, 29, 4, 3, 9, 30, 6, 2, 7, 30, 6, 3, 7, 30, 6, 4, 7, 30, 6, 5, 7, 33, 2, 1, 15, 34, 2, 1, 14, 35, 6, 2, 8, 35, 6, 3, 8, 35, 6, 4, 8, 35, 6, 5, 8, 38, 6, 2, 7, 38, 6, 3, 7, 38, 6, 4, 7, 38, 6, 5, 7, 41, 2, 1, 13, 42, 2, 1, 14, 43, 4, 1, 10, 43, 4, 3, 10, 43, 2, 1, 10, 45, 2, 1, 14, 46, 6, 2, 8, 46, 6, 3, 8, 46, 6, 4, 8, 46, 6, 5, 8, 49, 2, 1, 14, 50, 4, 1, 10, 50, 4, 3, 10, 50, 2, 1, 10, 52, 4, 1, 11, 52, 4, 3, 11, 53, 6, 2, 8, 53, 6, 3, 8, 53, 6, 4, 8, 53, 6, 5, 8, 56, 2, 1, 14, 57, 4, 1, 9, 57, 4, 3, 9, 58, 4, 1, 9, 58, 4, 3, 9, 59, 4, 1, 9, 59, 4, 3, 9, 59, 2, 1, 9, 61, 4, 1, 10, 61, 4, 3, 10, 61, 2, 1, 10, 63, 4, 1, 11, 63, 4, 3, 11, 64, 4, 1, 10, 64, 4, 3, 10, 65, 4, 1, 10, 65, 4, 3, 10, 65, 2, 1, 10, 67, 6, 2, 7, 67, 6, 3, 7, 67, 6, 4, 7, 67, 6, 5, 7, 70, 6, 2, 7, 70, 6, 3, 7, 70, 6, 4, 7, 70, 6, 5, 7, 73, 4, 1, 9, 73, 4, 3, 9, 73, 2, 1, 9, 75, 2, 1, 15, 76, 4, 1, 7, 76, 4, 3, 7};
int[] pattern14 = {1, 2, 1, 14, 2, 4, 1, 11, 2, 4, 3, 11, 3, 4, 1, 9, 3, 4, 3, 9, 4, 4, 1, 9, 4, 4, 3, 9, 4, 2, 1, 9, 6, 6, 2, 7, 6, 6, 3, 7, 6, 6, 4, 7, 6, 6, 5, 7, 9, 6, 2, 8, 9, 6, 3, 8, 9, 6, 4, 8, 9, 6, 5, 8, 12, 4, 1, 10, 12, 4, 3, 10, 12, 2, 1, 10, 14, 4, 1, 9, 14, 4, 3, 9, 15, 4, 1, 10, 15, 4, 3, 10, 16, 4, 1, 10, 16, 4, 3, 10, 17, 4, 1, 10, 17, 4, 3, 10, 17, 2, 1, 10, 19, 4, 1, 11, 19, 4, 3, 11, 20, 6, 2, 7, 20, 6, 3, 7, 20, 6, 4, 7, 20, 6, 5, 7, 23, 6, 2, 8, 23, 6, 3, 8, 23, 6, 4, 8, 23, 6, 5, 8, 26, 6, 2, 8, 26, 6, 3, 8, 26, 6, 4, 8, 26, 6, 5, 8, 29, 6, 2, 7, 29, 6, 3, 7, 29, 6, 4, 7, 29, 6, 5, 7, 32, 6, 2, 8, 32, 6, 3, 8, 32, 6, 4, 8, 32, 6, 5, 8, 35, 6, 2, 8, 35, 6, 3, 8, 35, 6, 4, 8, 35, 6, 5, 8, 38, 4, 1, 9, 38, 4, 3, 9, 39, 4, 1, 9, 39, 4, 3, 9, 39, 2, 1, 9, 41, 6, 2, 7, 41, 6, 3, 7, 41, 6, 4, 7, 41, 6, 5, 7, 44, 4, 1, 10, 44, 4, 3, 10, 45, 2, 1, 14, 46, 2, 1, 13, 47, 4, 1, 10, 47, 4, 3, 10, 47, 2, 1, 10, 49, 2, 1, 14, 50, 4, 1, 9, 50, 4, 3, 9, 50, 2, 1, 9, 52, 6, 2, 7, 52, 6, 3, 7, 52, 6, 4, 7, 52, 6, 5, 7, 55, 2, 1, 14, 56, 4, 1, 10, 56, 4, 3, 10, 56, 2, 1, 10, 58, 4, 1, 10, 58, 4, 3, 10, 59, 4, 1, 9, 59, 4, 3, 9, 59, 2, 1, 9, 61, 6, 2, 7, 61, 6, 3, 7, 61, 6, 4, 7, 61, 6, 5, 7, 64, 4, 1, 10, 64, 4, 3, 10, 65, 4, 1, 9, 65, 4, 3, 9, 65, 2, 1, 9, 67, 4, 1, 9, 67, 4, 3, 9, 68, 4, 1, 9, 68, 4, 3, 9, 68, 2, 1, 9, 70, 6, 2, 7, 70, 6, 3, 7, 70, 6, 4, 7, 70, 6, 5, 7, 73, 6, 2, 7, 73, 6, 3, 7, 73, 6, 4, 7, 73, 6, 5, 7, 76, 6, 2, 7, 76, 6, 3, 7, 76, 6, 4, 7, 76, 6, 5, 7, 79, 4, 1, 8, 79, 4, 3, 8};
int[] pattern15 = {1, 4, 1, 11, 1, 4, 3, 11, 2, 4, 1, 10, 2, 4, 3, 10, 2, 2, 1, 10, 4, 6, 2, 8, 4, 6, 3, 8, 4, 6, 4, 8, 4, 6, 5, 8, 7, 4, 1, 11, 7, 4, 3, 11, 8, 2, 1, 14, 9, 2, 1, 15, 10, 6, 2, 8, 10, 6, 3, 8, 10, 6, 4, 8, 10, 6, 5, 8, 13, 4, 1, 11, 13, 4, 3, 11, 13, 2, 1, 11, 15, 6, 2, 9, 15, 6, 3, 9, 15, 6, 4, 9, 15, 6, 5, 9, 18, 6, 2, 9, 18, 6, 3, 9, 18, 6, 4, 9, 18, 6, 5, 9, 21, 2, 1, 14, 22, 4, 1, 10, 22, 4, 3, 10, 22, 2, 1, 10, 24, 4, 1, 10, 24, 4, 3, 10, 25, 6, 2, 8, 25, 6, 3, 8, 25, 6, 4, 8, 25, 6, 5, 8, 28, 4, 1, 11, 28, 4, 3, 11, 28, 2, 1, 11, 30, 2, 1, 14, 31, 4, 1, 11, 31, 4, 3, 11, 32, 4, 1, 11, 32, 4, 3, 11, 33, 4, 1, 11, 33, 4, 3, 11, 33, 2, 1, 11, 35, 2, 1, 15, 36, 6, 2, 9, 36, 6, 3, 9, 36, 6, 4, 9, 36, 6, 5, 9, 39, 4, 1, 11, 39, 4, 3, 11, 40, 4, 1, 10, 40, 4, 3, 10, 41, 6, 2, 9, 41, 6, 3, 9, 41, 6, 4, 9, 41, 6, 5, 9, 44, 2, 1, 16, 45, 4, 1, 11, 45, 4, 3, 11, 45, 2, 1, 11, 47, 6, 2, 9, 47, 6, 3, 9, 47, 6, 4, 9, 47, 6, 5, 9, 50, 2, 1, 15, 51, 4, 1, 10, 51, 4, 3, 10, 51, 2, 1, 10, 53, 4, 1, 11, 53, 4, 3, 11, 53, 2, 1, 11, 55, 6, 2, 9, 55, 6, 3, 9, 55, 6, 4, 9, 55, 6, 5, 9, 58, 4, 1, 11, 58, 4, 3, 11, 59, 6, 2, 8, 59, 6, 3, 8, 59, 6, 4, 8, 59, 6, 5, 8, 62, 6, 2, 9, 62, 6, 3, 9, 62, 6, 4, 9, 62, 6, 5, 9, 65, 6, 2, 8, 65, 6, 3, 8, 65, 6, 4, 8, 65, 6, 5, 8, 68, 6, 2, 9, 68, 6, 3, 9, 68, 6, 4, 9, 68, 6, 5, 9, 71, 4, 1, 10, 71, 4, 3, 10, 71, 2, 1, 10, 73, 2, 1, 15, 74, 4, 1, 11, 74, 4, 3, 11, 75, 4, 1, 10, 75, 4, 3, 10, 75, 2, 1, 10, 77, 4, 1, 10, 77, 4, 3, 10, 77, 2, 1, 10, 79, 6, 2, 8, 79, 6, 3, 8, 79, 6, 4, 8, 79, 6, 5, 8, 82, 2, 1, 16, 83, 4, 1, 11, 83, 4, 3, 11, 83, 2, 1, 11, 85, 4, 1, 11, 85, 4, 3, 11, 85, 2, 1, 11, 87, 4, 1, 10, 87, 4, 3, 10, 88, 4, 1, 11, 88, 4, 3, 11, 88, 2, 1, 11, 90, 6, 2, 9, 90, 6, 3, 9, 90, 6, 4, 9};
int[] pattern16 = {1, 4, 1, 10, 1, 4, 3, 10, 2, 6, 2, 9, 2, 6, 3, 9, 2, 6, 4, 9, 2, 6, 5, 9, 4, 4, 1, 10, 4, 4, 3, 10, 5, 6, 2, 8, 5, 6, 3, 8, 5, 6, 4, 8, 5, 6, 5, 8, 7, 4, 1, 10, 7, 4, 3, 10, 8, 4, 1, 11, 8, 4, 3, 11, 9, 2, 1, 16, 10, 4, 1, 11, 10, 4, 3, 11, 11, 4, 1, 10, 11, 4, 3, 10, 12, 6, 2, 9, 12, 6, 3, 9, 12, 6, 4, 9, 12, 6, 5, 9, 14, 4, 1, 11, 14, 4, 3, 11, 15, 4, 1, 11, 15, 4, 3, 11, 16, 2, 1, 14, 17, 2, 1, 14, 18, 4, 1, 11, 18, 4, 3, 11, 19, 2, 1, 15, 20, 2, 1, 15, 21, 2, 1, 15, 22, 6, 2, 8, 22, 6, 3, 8, 22, 6, 4, 8, 22, 6, 5, 8, 24, 4, 1, 10, 24, 4, 3, 10, 24, 2, 1, 10, 26, 4, 1, 11, 26, 4, 3, 11, 27, 6, 2, 9, 27, 6, 3, 9, 27, 6, 4, 9, 27, 6, 5, 9, 29, 2, 1, 14, 30, 6, 2, 9, 30, 6, 3, 9, 30, 6, 4, 9, 30, 6, 5, 9, 32, 4, 1, 11, 32, 4, 3, 11, 33, 6, 2, 8, 33, 6, 3, 8, 33, 6, 4, 8, 33, 6, 5, 8, 35, 6, 2, 8, 35, 6, 3, 8, 35, 6, 4, 8, 35, 6, 5, 8, 37, 4, 1, 10, 37, 4, 3, 10, 37, 2, 1, 10, 39, 6, 2, 8, 39, 6, 3, 8, 39, 6, 4, 8, 39, 6, 5, 8, 41, 4, 1, 11, 41, 4, 3, 11, 41, 2, 1, 11, 43, 4, 1, 11, 43, 4, 3, 11, 44, 2, 1, 14, 45, 2, 1, 14, 46, 4, 1, 10, 46, 4, 3, 10, 46, 2, 1, 10, 48, 4, 1, 11, 48, 4, 3, 11, 49, 6, 2, 9, 49, 6, 3, 9, 49, 6, 4, 9, 49, 6, 5, 9, 51, 4, 1, 11, 51, 4, 3, 11, 51, 2, 1, 11, 53, 6, 2, 8, 53, 6, 3, 8, 53, 6, 4, 8, 53, 6, 5, 8, 55, 6, 2, 8, 55, 6, 3, 8, 55, 6, 4, 8, 55, 6, 5, 8, 57, 2, 1, 14, 58, 4, 1, 10, 58, 4, 3, 10, 59, 4, 1, 10, 59, 4, 3, 10, 60, 6, 2, 9, 60, 6, 3, 9, 60, 6, 4, 9, 60, 6, 5, 9, 62, 6, 2, 9, 62, 6, 3, 9, 62, 6, 4, 9, 62, 6, 5, 9, 64, 2, 1, 16, 65, 4, 1, 10, 65, 4, 3, 10, 65, 2, 1, 10, 67, 6, 2, 8, 67, 6, 3, 8, 67, 6, 4, 8, 67, 6, 5, 8, 69, 4, 1, 10, 69, 4, 3, 10, 70, 6, 2, 8, 70, 6, 3, 8, 70, 6, 4, 8, 70, 6, 5, 8, 72, 2, 1, 14, 73, 6, 2, 8, 73, 6, 3, 8, 73, 6, 4, 8, 73, 6, 5, 8, 75, 2, 1, 15, 76, 6, 2, 9, 76, 6, 3, 9, 76, 6, 4, 9, 76, 6, 5, 9, 78, 4, 1, 10, 78, 4, 3, 10, 79, 4, 1, 11, 79, 4, 3, 11, 79, 2, 1, 11, 81, 2, 1, 15, 82, 4, 1, 11, 82, 4, 3, 11, 82, 2, 1, 11, 84, 4, 1, 10, 84, 4, 3, 10, 85, 6, 2, 9, 85, 6, 3, 9, 85, 6, 4, 9, 85, 6, 5, 9};
int[] pattern17 = {1, 2, 1, 15, 2, 4, 1, 10, 2, 4, 3, 10, 2, 2, 1, 10, 4, 6, 2, 9, 4, 6, 3, 9, 4, 6, 4, 9, 4, 6, 5, 9, 6, 4, 1, 11, 6, 4, 3, 11, 6, 2, 1, 11, 8, 6, 2, 8, 8, 6, 3, 8, 8, 6, 4, 8, 8, 6, 5, 8, 10, 2, 1, 16, 11, 6, 2, 9, 11, 6, 3, 9, 11, 6, 4, 9, 11, 6, 5, 9, 13, 4, 1, 10, 13, 4, 3, 10, 14, 2, 1, 15, 15, 4, 1, 10, 15, 4, 3, 10, 16, 2, 1, 16, 17, 4, 1, 10, 17, 4, 3, 10, 18, 2, 1, 16, 19, 4, 1, 10, 19, 4, 3, 10, 19, 2, 1, 10, 21, 2, 1, 15, 22, 4, 1, 11, 22, 4, 3, 11, 22, 2, 1, 11, 24, 6, 2, 9, 24, 6, 3, 9, 24, 6, 4, 9, 24, 6, 5, 9, 26, 4, 1, 10, 26, 4, 3, 10, 26, 2, 1, 10, 28, 6, 2, 8, 28, 6, 3, 8, 28, 6, 4, 8, 28, 6, 5, 8, 30, 4, 1, 11, 30, 4, 3, 11, 31, 4, 1, 11, 31, 4, 3, 11, 31, 2, 1, 11, 33, 4, 1, 10, 33, 4, 3, 10, 34, 4, 1, 11, 34, 4, 3, 11, 34, 2, 1, 11, 36, 4, 1, 10, 36, 4, 3, 10, 37, 4, 1, 11, 37, 4, 3, 11, 38, 4, 1, 10, 38, 4, 3, 10, 39, 6, 2, 9, 39, 6, 3, 9, 39, 6, 4, 9, 39, 6, 5, 9, 41, 2, 1, 17, 42, 4, 1, 10, 42, 4, 3, 10, 43, 2, 1, 17, 44, 4, 1, 11, 44, 4, 3, 11, 44, 2, 1, 11, 46, 2, 1, 15, 47, 4, 1, 10, 47, 4, 3, 10, 48, 6, 2, 8, 48, 6, 3, 8, 48, 6, 4, 8, 48, 6, 5, 8, 50, 6, 2, 8, 50, 6, 3, 8, 50, 6, 4, 8, 50, 6, 5, 8, 52, 6, 2, 9, 52, 6, 3, 9, 52, 6, 4, 9, 52, 6, 5, 9, 54, 2, 1, 15, 55, 6, 2, 8, 55, 6, 3, 8, 55, 6, 4, 8, 55, 6, 5, 8, 57, 4, 1, 11, 57, 4, 3, 11, 58, 2, 1, 16, 59, 2, 1, 15, 60, 2, 1, 16, 61, 6, 2, 9, 61, 6, 3, 9, 61, 6, 4, 9, 61, 6, 5, 9, 63, 4, 1, 10, 63, 4, 3, 10, 63, 2, 1, 10, 65, 6, 2, 8, 65, 6, 3, 8, 65, 6, 4, 8, 65, 6, 5, 8, 67, 4, 1, 10, 67, 4, 3, 10, 67, 2, 1, 10, 69, 4, 1, 10, 69, 4, 3, 10, 69, 2, 1, 10, 71, 4, 1, 11, 71, 4, 3, 11, 71, 2, 1, 11, 73, 4, 1, 11, 73, 4, 3, 11, 73, 2, 1, 11, 75, 4, 1, 11, 75, 4, 3, 11, 75, 2, 1, 11, 77, 4, 1, 11, 77, 4, 3, 11, 77, 2, 1, 11, 79, 4, 1, 10, 79, 4, 3, 10, 80, 4, 1, 10, 80, 4, 3, 10, 81, 4, 1, 11, 81, 4, 3, 11, 81, 2, 1, 11, 83, 4, 1, 11, 83, 4, 3, 11, 84, 4, 1, 11, 84, 4, 3, 11, 85, 4, 1, 10, 85, 4, 3, 10, 85, 2, 1, 10, 87, 2, 1, 17, 88, 4, 1, 10, 88, 4, 3, 10, 89, 4, 1, 10, 89, 4, 3, 10, 90, 2, 1, 16, 91, 4, 1, 11, 91, 4, 3, 11, 91, 2, 1, 11, 93, 2, 1, 17, 94, 4, 1, 10, 94, 4, 3, 10, 95, 6, 2, 9, 95, 6, 3, 9, 95, 6, 4, 9, 95, 6, 5, 9, 97, 2, 1, 15, 98, 2, 1, 15, 99, 4, 1, 11, 99, 4, 3, 11, 99, 2, 1, 11, 101, 4, 1, 11, 101, 4, 3, 11};
int[] pattern18 = {1, 6, 2, 9, 1, 6, 3, 9, 1, 6, 4, 9, 1, 6, 5, 9, 3, 4, 1, 11, 3, 4, 3, 11, 4, 2, 1, 16, 5, 4, 1, 11, 5, 4, 3, 11, 6, 4, 1, 11, 6, 4, 3, 11, 6, 2, 1, 11, 8, 2, 1, 17, 9, 4, 1, 11, 9, 4, 3, 11, 9, 2, 1, 11, 11, 4, 1, 11, 11, 4, 3, 11, 12, 4, 1, 12, 12, 4, 3, 12, 13, 4, 1, 11, 13, 4, 3, 11, 13, 2, 1, 11, 15, 6, 2, 9, 15, 6, 3, 9, 15, 6, 4, 9, 15, 6, 5, 9, 17, 2, 1, 16, 18, 6, 2, 9, 18, 6, 3, 9, 18, 6, 4, 9, 18, 6, 5, 9, 20, 4, 1, 11, 20, 4, 3, 11, 20, 2, 1, 11, 22, 2, 1, 16, 23, 4, 1, 12, 23, 4, 3, 12, 24, 2, 1, 16, 25, 4, 1, 11, 25, 4, 3, 11, 25, 2, 1, 11, 27, 4, 1, 10, 27, 4, 3, 10, 27, 2, 1, 10, 29, 6, 2, 8, 29, 6, 3, 8, 29, 6, 4, 8, 29, 6, 5, 8, 31, 2, 1, 15, 32, 6, 2, 8, 32, 6, 3, 8, 32, 6, 4, 8, 32, 6, 5, 8, 34, 4, 1, 11, 34, 4, 3, 11, 35, 4, 1, 11, 35, 4, 3, 11, 35, 2, 1, 11, 37, 4, 1, 12, 37, 4, 3, 12, 38, 4, 1, 12, 38, 4, 3, 12, 39, 6, 2, 8, 39, 6, 3, 8, 39, 6, 4, 8, 39, 6, 5, 8, 41, 2, 1, 16, 42, 4, 1, 10, 42, 4, 3, 10, 42, 2, 1, 10, 44, 4, 1, 12, 44, 4, 3, 12, 45, 4, 1, 11, 45, 4, 3, 11, 46, 6, 2, 8, 46, 6, 3, 8, 46, 6, 4, 8, 46, 6, 5, 8, 48, 6, 2, 9, 48, 6, 3, 9, 48, 6, 4, 9, 48, 6, 5, 9, 50, 6, 2, 9, 50, 6, 3, 9, 50, 6, 4, 9, 50, 6, 5, 9, 52, 4, 1, 11, 52, 4, 3, 11, 52, 2, 1, 11, 54, 4, 1, 12, 54, 4, 3, 12, 55, 2, 1, 17, 56, 6, 2, 9, 56, 6, 3, 9, 56, 6, 4, 9, 56, 6, 5, 9, 58, 4, 1, 11, 58, 4, 3, 11, 58, 2, 1, 11, 60, 4, 1, 11, 60, 4, 3, 11, 61, 6, 2, 8, 61, 6, 3, 8, 61, 6, 4, 8, 61, 6, 5, 8, 63, 6, 2, 9, 63, 6, 3, 9, 63, 6, 4, 9, 63, 6, 5, 9, 65, 6, 2, 8, 65, 6, 3, 8, 65, 6, 4, 8, 65, 6, 5, 8, 67, 2, 1, 16, 68, 6, 2, 8, 68, 6, 3, 8, 68, 6, 4, 8, 68, 6, 5, 8, 70, 4, 1, 11, 70, 4, 3, 11, 70, 2, 1, 11, 72, 6, 2, 9, 72, 6, 3, 9, 72, 6, 4, 9, 72, 6, 5, 9, 74, 4, 1, 12, 74, 4, 3, 12, 75, 2, 1, 17, 76, 4, 1, 10, 76, 4, 3, 10, 76, 2, 1, 10, 78, 4, 1, 12, 78, 4, 3, 12, 79, 6, 2, 8, 79, 6, 3, 8, 79, 6, 4, 8, 79, 6, 5, 8, 81, 6, 2, 9, 81, 6, 3, 9, 81, 6, 4, 9, 81, 6, 5, 9, 83, 6, 2, 8, 83, 6, 3, 8, 83, 6, 4, 8, 83, 6, 5, 8, 85, 2, 1, 16, 86, 4, 1, 10, 86, 4, 3, 10, 86, 2, 1, 10, 88, 2, 1, 15, 89, 4, 1, 12, 89, 4, 3, 12, 90, 2, 1, 16, 91, 6, 2, 8, 91, 6, 3, 8, 91, 6, 4, 8, 91, 6, 5, 8, 93, 4, 1, 12, 93, 4, 3, 12, 94, 2, 1, 17, 95, 4, 1, 10, 95, 4, 3, 10, 95, 2, 1, 10, 97, 4, 1, 10, 97, 4, 3, 10, 97, 2, 1, 10, 99, 2, 1, 16, 100, 6, 2, 8, 100, 6, 3, 8, 100, 6, 4, 8, 100, 6, 5, 8, 102, 4, 1, 11, 102, 4, 3, 11, 102, 2, 1, 11, 104, 4, 1, 12, 104, 4, 3, 12, 105, 4, 1, 11, 105, 4, 3, 11, 106, 2, 1, 16, 107, 2, 1, 15, 108, 2, 1, 16, 109, 6, 2, 9, 109, 6, 3, 9, 109, 6, 4, 9};
int[] pattern19 = {1, 4, 1, 12, 1, 4, 3, 12, 1, 2, 1, 12, 3, 6, 2, 8, 3, 6, 3, 8, 3, 6, 4, 8, 3, 6, 5, 8, 5, 6, 2, 8, 5, 6, 3, 8, 5, 6, 4, 8, 5, 6, 5, 8, 7, 4, 1, 12, 7, 4, 3, 12, 7, 2, 1, 12, 9, 6, 2, 8, 9, 6, 3, 8, 9, 6, 4, 8, 9, 6, 5, 8, 11, 4, 1, 11, 11, 4, 3, 11, 11, 2, 1, 11, 13, 6, 2, 9, 13, 6, 3, 9, 13, 6, 4, 9, 13, 6, 5, 9, 15, 6, 2, 9, 15, 6, 3, 9, 15, 6, 4, 9, 15, 6, 5, 9, 17, 4, 1, 11, 17, 4, 3, 11, 18, 2, 1, 17, 19, 6, 2, 9, 19, 6, 3, 9, 19, 6, 4, 9, 19, 6, 5, 9, 21, 4, 1, 12, 21, 4, 3, 12, 22, 4, 1, 11, 22, 4, 3, 11, 22, 2, 1, 11, 24, 4, 1, 12, 24, 4, 3, 12, 25, 4, 1, 11, 25, 4, 3, 11, 25, 2, 1, 11, 27, 4, 1, 11, 27, 4, 3, 11, 27, 2, 1, 11, 29, 4, 1, 12, 29, 4, 3, 12, 29, 2, 1, 12, 31, 4, 1, 11, 31, 4, 3, 11, 32, 6, 2, 9, 32, 6, 3, 9, 32, 6, 4, 9, 32, 6, 5, 9, 34, 4, 1, 11, 34, 4, 3, 11, 35, 4, 1, 11, 35, 4, 3, 11, 36, 2, 1, 17, 37, 6, 2, 8, 37, 6, 3, 8, 37, 6, 4, 8, 37, 6, 5, 8, 39, 4, 1, 12, 39, 4, 3, 12, 40, 4, 1, 11, 40, 4, 3, 11, 41, 2, 1, 17, 42, 4, 1, 12, 42, 4, 3, 12, 43, 6, 2, 8, 43, 6, 3, 8, 43, 6, 4, 8, 43, 6, 5, 8, 45, 2, 1, 15, 46, 4, 1, 12, 46, 4, 3, 12, 47, 2, 1, 15, 48, 6, 2, 8, 48, 6, 3, 8, 48, 6, 4, 8, 48, 6, 5, 8, 50, 4, 1, 11, 50, 4, 3, 11, 51, 4, 1, 12, 51, 4, 3, 12, 51, 2, 1, 12, 53, 4, 1, 11, 53, 4, 3, 11, 54, 4, 1, 11, 54, 4, 3, 11, 55, 6, 2, 8, 55, 6, 3, 8, 55, 6, 4, 8, 55, 6, 5, 8, 57, 6, 2, 8, 57, 6, 3, 8, 57, 6, 4, 8, 57, 6, 5, 8, 59, 4, 1, 11, 59, 4, 3, 11, 59, 2, 1, 11, 61, 4, 1, 11, 61, 4, 3, 11, 62, 2, 1, 15, 63, 6, 2, 9, 63, 6, 3, 9, 63, 6, 4, 9, 63, 6, 5, 9, 65, 4, 1, 12, 65, 4, 3, 12, 65, 2, 1, 12, 67, 4, 1, 12, 67, 4, 3, 12, 67, 2, 1, 12, 69, 4, 1, 12, 69, 4, 3, 12, 69, 2, 1, 12, 71, 6, 2, 8, 71, 6, 3, 8, 71, 6, 4, 8, 71, 6, 5, 8, 73, 4, 1, 11, 73, 4, 3, 11, 73, 2, 1, 11, 75, 2, 1, 16, 76, 4, 1, 11, 76, 4, 3, 11, 77, 4, 1, 11, 77, 4, 3, 11, 78, 2, 1, 16, 79, 4, 1, 12, 79, 4, 3, 12, 80, 4, 1, 12, 80, 4, 3, 12, 81, 2, 1, 17, 82, 4, 1, 12, 82, 4, 3, 12, 82, 2, 1, 12, 84, 4, 1, 11, 84, 4, 3, 11, 85, 2, 1, 17, 86, 2, 1, 17, 87, 2, 1, 15, 88, 2, 1, 16, 89, 2, 1, 17, 90, 2, 1, 15, 91, 6, 2, 8, 91, 6, 3, 8, 91, 6, 4, 8, 91, 6, 5, 8, 93, 6, 2, 9, 93, 6, 3, 9, 93, 6, 4, 9, 93, 6, 5, 9, 95, 4, 1, 11, 95, 4, 3, 11, 96, 6, 2, 8, 96, 6, 3, 8, 96, 6, 4, 8, 96, 6, 5, 8, 98, 4, 1, 11, 98, 4, 3, 11, 99, 4, 1, 12, 99, 4, 3, 12, 100, 6, 2, 9, 100, 6, 3, 9, 100, 6, 4, 9, 100, 6, 5, 9, 102, 6, 2, 9, 102, 6, 3, 9, 102, 6, 4, 9, 102, 6, 5, 9, 104, 6, 2, 8, 104, 6, 3, 8, 104, 6, 4, 8, 104, 6, 5, 8, 106, 4, 1, 11, 106, 4, 3, 11, 106, 2, 1, 11, 108, 2, 1, 15, 109, 4, 1, 11, 109, 4, 3, 11, 110, 6, 2, 9, 110, 6, 3, 9, 110, 6, 4, 9, 110, 6, 5, 9, 112, 2, 1, 17, 113, 4, 1, 12, 113, 4, 3, 12, 114, 6, 2, 9, 114, 6, 3, 9, 114, 6, 4, 9, 114, 6, 5, 9, 116, 4, 1, 12, 116, 4, 3, 12};
int[] pattern20 = {1, 4, 1, 11, 1, 4, 3, 11, 1, 2, 1, 11, 3, 4, 1, 11, 3, 4, 3, 11, 4, 4, 1, 12, 4, 4, 3, 12, 5, 4, 1, 12, 5, 4, 3, 12, 5, 2, 1, 12, 7, 6, 2, 11, 7, 6, 3, 11, 7, 6, 4, 11, 7, 6, 5, 11, 9, 4, 1, 12, 9, 4, 3, 12, 9, 2, 1, 12, 11, 4, 1, 12, 11, 4, 3, 12, 12, 6, 2, 10, 12, 6, 3, 10, 12, 6, 4, 10, 12, 6, 5, 10, 14, 4, 1, 12, 14, 4, 3, 12, 14, 2, 1, 12, 16, 2, 1, 17, 17, 4, 1, 12, 17, 4, 3, 12, 18, 4, 1, 12, 18, 4, 3, 12, 19, 6, 2, 11, 19, 6, 3, 11, 19, 6, 4, 11, 19, 6, 5, 11, 21, 6, 2, 11, 21, 6, 3, 11, 21, 6, 4, 11, 21, 6, 5, 11, 23, 2, 1, 15, 24, 6, 2, 11, 24, 6, 3, 11, 24, 6, 4, 11, 24, 6, 5, 11, 26, 4, 1, 12, 26, 4, 3, 12, 26, 2, 1, 12, 28, 4, 1, 12, 28, 4, 3, 12, 28, 2, 1, 12, 30, 2, 1, 17, 31, 2, 1, 17, 32, 2, 1, 17, 33, 4, 1, 11, 33, 4, 3, 11, 33, 2, 1, 11, 35, 4, 1, 11, 35, 4, 3, 11, 35, 2, 1, 11, 37, 4, 1, 12, 37, 4, 3, 12, 38, 6, 2, 11, 38, 6, 3, 11, 38, 6, 4, 11, 38, 6, 5, 11, 40, 6, 2, 10, 40, 6, 3, 10, 40, 6, 4, 10, 40, 6, 5, 10, 42, 4, 1, 12, 42, 4, 3, 12, 43, 2, 1, 17, 44, 4, 1, 11, 44, 4, 3, 11, 44, 2, 1, 11, 46, 4, 1, 12, 46, 4, 3, 12, 47, 4, 1, 12, 47, 4, 3, 12, 47, 2, 1, 12, 49, 4, 1, 11, 49, 4, 3, 11, 49, 2, 1, 11, 51, 6, 2, 10, 51, 6, 3, 10, 51, 6, 4, 10, 51, 6, 5, 10, 53, 6, 2, 10, 53, 6, 3, 10, 53, 6, 4, 10, 53, 6, 5, 10, 55, 4, 1, 12, 55, 4, 3, 12, 56, 2, 1, 15, 57, 4, 1, 11, 57, 4, 3, 11, 57, 2, 1, 11, 59, 2, 1, 16, 60, 4, 1, 12, 60, 4, 3, 12, 61, 2, 1, 17, 62, 6, 2, 10, 62, 6, 3, 10, 62, 6, 4, 10, 62, 6, 5, 10, 64, 2, 1, 16, 65, 6, 2, 11, 65, 6, 3, 11, 65, 6, 4, 11, 65, 6, 5, 11, 67, 6, 2, 11, 67, 6, 3, 11, 67, 6, 4, 11, 67, 6, 5, 11, 69, 6, 2, 10, 69, 6, 3, 10, 69, 6, 4, 10, 69, 6, 5, 10, 71, 4, 1, 11, 71, 4, 3, 11, 71, 2, 1, 11, 73, 2, 1, 17, 74, 4, 1, 12, 74, 4, 3, 12, 74, 2, 1, 12, 76, 4, 1, 11, 76, 4, 3, 11, 76, 2, 1, 11, 78, 4, 1, 11, 78, 4, 3, 11, 79, 2, 1, 16, 80, 4, 1, 11, 80, 4, 3, 11, 81, 6, 2, 10, 81, 6, 3, 10, 81, 6, 4, 10, 81, 6, 5, 10, 83, 4, 1, 11, 83, 4, 3, 11, 84, 4, 1, 12, 84, 4, 3, 12, 85, 4, 1, 12, 85, 4, 3, 12, 86, 2, 1, 15, 87, 2, 1, 15, 88, 4, 1, 12, 88, 4, 3, 12, 88, 2, 1, 12, 90, 6, 2, 11, 90, 6, 3, 11, 90, 6, 4, 11, 90, 6, 5, 11, 92, 4, 1, 12, 92, 4, 3, 12, 93, 6, 2, 10, 93, 6, 3, 10, 93, 6, 4, 10, 93, 6, 5, 10, 95, 6, 2, 11, 95, 6, 3, 11, 95, 6, 4, 11, 95, 6, 5, 11, 97, 4, 1, 12, 97, 4, 3, 12, 97, 2, 1, 12, 99, 4, 1, 11, 99, 4, 3, 11, 99, 2, 1, 11, 101, 4, 1, 12, 101, 4, 3, 12, 102, 6, 2, 11, 102, 6, 3, 11, 102, 6, 4, 11, 102, 6, 5, 11, 104, 6, 2, 11, 104, 6, 3, 11, 104, 6, 4, 11, 104, 6, 5, 11, 106, 2, 1, 15, 107, 2, 1, 16, 108, 4, 1, 11, 108, 4, 3, 11, 108, 2, 1, 11, 110, 4, 1, 11, 110, 4, 3, 11, 111, 2, 1, 15, 112, 6, 2, 10, 112, 6, 3, 10, 112, 6, 4, 10, 112, 6, 5, 10, 114, 2, 1, 15, 115, 4, 1, 12, 115, 4, 3, 12, 115, 2, 1, 12, 117, 4, 1, 11, 117, 4, 3, 11, 117, 2, 1, 11, 119, 4, 1, 11, 119, 4, 3, 11, 119, 2, 1, 11, 121, 4, 1, 12, 121, 4, 3, 12, 121, 2, 1, 12, 123, 6, 2, 11, 123, 6, 3, 11, 123, 6, 4, 11, 123, 6, 5, 11, 125, 4, 1, 12, 125, 4, 3, 12, 126, 4, 1, 11, 126, 4, 3, 11, 127, 4, 1, 11, 127, 4, 3, 11, 127, 2, 1, 11, 129, 4, 1, 11, 129, 4, 3, 11, 129, 2, 1, 11, 131, 6, 2, 11, 131, 6, 3, 11, 131, 6, 4, 11, 131, 6, 5, 11, 133, 2, 1, 15, 134, 6, 2, 11, 134, 6, 3, 11, 134, 6, 4, 11};

// Déclaration des variables images d'arrière plans, instanciation de variables les contrôlant
PImage menu_background, long_background, background, long_foreground, foreground;
int background_width = 0, foreground_width = 0;
float dimension;
String text_niveau;
PFont police;

// Déclaration des variables images et instancation des listes permettant de les manipuler
PImage v_sprite, a_sprite1, a_sprite2, a_sprite3, a_sprite4, t_sprite, titre_sprite, menu_sprite, jouer_sprite, aide_sprite, quitter_sprite, rejouer_sprite, suivant_sprite, instructions;
PImage[] v_tab = new PImage[5];
PImage[] a_tab1 = new PImage[3];
PImage[] a_tab2 = new PImage[3];
PImage[] a_tab3 = new PImage[3];
PImage[] a_tab4 = new PImage[3];
PImage[] t_tab = new PImage[4];
PImage[] recharge_tab = new PImage[9];
PImage[] titre_tab = new PImage[9];
PImage[] menu_tab = new PImage[2];
PImage[] jouer_tab = new PImage[2];
PImage[] aide_tab = new PImage[2];
PImage[] quitter_tab = new PImage[2];
PImage[] rejouer_tab = new PImage[2];
PImage[] suivant_tab = new PImage[2];

// Déclaration des variables états des différentes fenêtres du programme
boolean menu = true, niveaux, aide, quitter, ingame, defaite, victoire, precedente_defaite, rejouer;

void setup() {
  // Plein écran
  //size(displayWidth, displayHeight);
  fullScreen();

  // Import des sons associés à des variables
  minim = new Minim(this);
  son_boom = minim.loadSnippet("boom.mp3");
  son_tirs = minim.loadSnippet("tirs.mp3");
  son_click = minim.loadSnippet("click.mp3");
  son_musique = minim.loadSnippet("test.mp3");
  son_musique_enervee = minim.loadSnippet("dubstep-enervée.mp3");

  // Dimensionnement de l'écran
  if (width/height == 16/9) dimension = 3.555208333;
  else if (width/height == 4/3) dimension = 4.740277778;
  else if (width/height == 8/5) dimension = 3.950231481;

  police = loadFont("RageItalic-200.vlw");

  // Import et redimensionnement d'images
  menu_background = loadImage("menu_background.png");
  long_background = loadImage("ig_background.png");
  long_foreground = loadImage("ig_foreground.png");
  instructions = loadImage("page_aide.png");
  menu_background.resize(width, height);
  instructions.resize(ceil(0.7*width), ceil(0.7*height));
  long_background.resize(ceil(width * dimension), height);
  long_foreground.resize(ceil(width * dimension), height);

  // Instanciation de la liste de sprites du titre "COUT ET CIN" découpés dans l'image associée
  titre_sprite = loadImage("titre.png");
  titre_tab[0] = titre_sprite.get(0, 0, 530, 80);
  titre_tab[1] = titre_sprite.get(0, 80, 530, 80);
  titre_tab[2] = titre_sprite.get(0, 160, 530, 80);
  titre_tab[3] = titre_sprite.get(0, 240, 530, 80);
  titre_tab[4] = titre_sprite.get(0, 320, 530, 80);
  titre_tab[5] = titre_sprite.get(0, 400, 530, 80);
  titre_tab[6] = titre_sprite.get(0, 480, 530, 80);
  titre_tab[7] = titre_sprite.get(0, 560, 530, 80);
  titre_tab[8] = titre_sprite.get(0, 640, 530, 80);

  // Instanciation de la liste de sprites du bouton "JOUER" découpés dans l'image associée
  jouer_sprite = loadImage("jouer.png");
  jouer_tab[0] = jouer_sprite.get(0, 2, 295, 90);
  jouer_tab[1] = jouer_sprite.get(0, 90, 295, 90);

  // Instanciation de la liste de sprites du bouton "AIDE" découpés dans l'image associée
  aide_sprite = loadImage("aide.png");
  aide_tab[0] = aide_sprite.get(0, 2, 225, 90);
  aide_tab[1] = aide_sprite.get(0, 90, 225, 90);

  // Instanciation de la liste de sprites du bouton "QUITTER" découpés dans l'image associée
  quitter_sprite = loadImage("quitter.png");
  quitter_tab[0] = quitter_sprite.get(0, 2, 375, 90);
  quitter_tab[1] = quitter_sprite.get(0, 90, 375, 90);

  // Instanciation de la liste de sprites du bouton "MENU" découpés dans l'image associée
  menu_sprite = loadImage("menu.png");
  menu_tab[0] = menu_sprite.get(5, 2, 240, 90);
  menu_tab[1] = menu_sprite.get(5, 90, 240, 90);

  // Instanciation de la liste de sprites du bouton "REJOUER" découpés dans l'image associée
  rejouer_sprite = loadImage("rejouer.png");
  rejouer_tab[0] = rejouer_sprite.get(0, 0, 410, 90);
  rejouer_tab[1] = rejouer_sprite.get(0, 90, 410, 90);

  // Instanciation de la liste de sprites du bouton "SUIVANT" découpés dans l'image associée
  suivant_sprite = loadImage("suivant.png");
  suivant_tab[0] = suivant_sprite.get(0, 0, 405, 100);
  suivant_tab[1] = suivant_sprite.get(0, 100, 405, 100);

  // Instanciation de la liste de sprites de l'objet "Vaisseau" découpés dans l'image associée
  v_sprite = loadImage("vaisseau.png");
  v_tab[0] = v_sprite.get(0, 0, 195, 220);
  v_tab[1] = v_sprite.get(195, 0, 195, 220);
  v_tab[2] = v_sprite.get(0, 220, 195, 220);
  v_tab[3] = v_sprite.get(195, 220, 195, 220);
  v_tab[4] = v_sprite.get(0, 440, 195, 220);

  // Instanciation de la liste de sprites du premier design de l'objet "Assaillant" découpés dans l'image associée
  a_sprite1 = loadImage("assaillant1.png");
  a_tab1[0] = a_sprite1.get(0, 0, 100, 100);
  a_tab1[1] = a_sprite1.get(100, 0, 100, 100);
  a_tab1[2] = a_sprite1.get(0, 100, 100, 100);

  // Instanciation de la liste de sprites du deuxième design de l'objet "Assaillant" découpés dans l'image associée
  a_sprite2 = loadImage("assaillant2.png");
  a_tab2[0] = a_sprite2.get(0, 0, 160, 160);
  a_tab2[1] = a_sprite2.get(160, 0, 160, 160);
  a_tab2[2] = a_sprite2.get(0, 160, 160, 160);

  // Instanciation de la liste de sprites du troisième design de l'objet "Assaillant" découpés dans l'image associée
  a_sprite3 = loadImage("assaillant3.png");
  a_tab3[0] = a_sprite3.get(0, 0, 125, 125);
  a_tab3[1] = a_sprite3.get(125, 0, 125, 125);
  a_tab3[2] = a_sprite3.get(125, 250, 125, 125);

  // Instanciation de la liste de sprites du quatrième design de l'objet "Assaillant" découpés dans l'image associée
  a_sprite4 = loadImage("assaillant4.png");
  a_tab4[0] = a_sprite4.get(0, 0, 105, 85);
  a_tab4[1] = a_sprite4.get(105, 0, 105, 85);
  a_tab4[2] = a_sprite4.get(0, 85, 105, 85);

  // Instanciation de la liste de sprites de l'objet "Tir" découpés dans l'image associée
  t_sprite = loadImage("tir.png");
  t_tab[0] = t_sprite.get(0, 0, 320, 120);
  t_tab[1] = t_sprite.get(0, 120, 320, 120);
  t_tab[2] = t_sprite.get(0, 240, 320, 120);
  t_tab[3] = t_sprite.get(0, 360, 320, 120);

  // Initialision du paterne du premier niveau
  for (int i = 0; i < pattern01.length; i += 4) {
    pattern_n01[j] = pattern01[i];
    pattern_n01[j+1] = (displayHeight-50)/pattern01[i+1];
    pattern_n01[j+1] *= pattern01[i+2];
    pattern_n01[j+2] = pattern01[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du deuxième niveau
  for (int i = 0; i < pattern02.length; i += 4) {
    pattern_n02[j] = pattern02[i];
    pattern_n02[j+1] = (displayHeight-50)/pattern02[i+1];
    pattern_n02[j+1] *= pattern02[i+2];
    pattern_n02[j+2] = pattern02[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du troisième niveau
  for (int i = 0; i < pattern03.length; i += 4) {
    pattern_n03[j] = pattern03[i];
    pattern_n03[j+1] = (displayHeight-50)/pattern03[i+1];
    pattern_n03[j+1] *= pattern03[i+2];
    pattern_n03[j+2] = pattern03[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du quatrième niveau
  for (int i = 0; i < pattern04.length; i += 4) {
    pattern_n04[j] = pattern04[i];
    pattern_n04[j+1] = (displayHeight-50)/pattern04[i+1];
    pattern_n04[j+1] *= pattern04[i+2];
    pattern_n04[j+2] = pattern04[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du cinquième niveau
  for (int i = 0; i < pattern05.length; i += 4) {
    pattern_n05[j] = pattern05[i];
    pattern_n05[j+1] = (displayHeight-50)/pattern05[i+1];
    pattern_n05[j+1] *= pattern05[i+2];
    pattern_n05[j+2] = pattern05[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du sixième niveau
  for (int i = 0; i < pattern06.length; i += 4) {
    pattern_n06[j] = pattern06[i];
    pattern_n06[j+1] = (displayHeight-50)/pattern06[i+1];
    pattern_n06[j+1] *= pattern06[i+2];
    pattern_n06[j+2] = pattern06[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du septième niveau
  for (int i = 0; i < pattern07.length; i += 4) {
    pattern_n07[j] = pattern07[i];
    pattern_n07[j+1] = (displayHeight-50)/pattern07[i+1];
    pattern_n07[j+1] *= pattern07[i+2];
    pattern_n07[j+2] = pattern07[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du huitième niveau
  for (int i = 0; i < pattern08.length; i += 4) {
    pattern_n08[j] = pattern08[i];
    pattern_n08[j+1] = (displayHeight-50)/pattern08[i+1];
    pattern_n08[j+1] *= pattern08[i+2];
    pattern_n08[j+2] = pattern08[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du neuvième niveau
  for (int i = 0; i < pattern09.length; i += 4) {
    pattern_n09[j] = pattern09[i];
    pattern_n09[j+1] = (displayHeight-50)/pattern09[i+1];
    pattern_n09[j+1] *= pattern09[i+2];
    pattern_n09[j+2] = pattern09[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du dixième niveau
  for (int i = 0; i < pattern10.length; i += 4) {
    pattern_n10[j] = pattern10[i];
    pattern_n10[j+1] = (displayHeight-50)/pattern10[i+1];
    pattern_n10[j+1] *= pattern10[i+2];
    pattern_n10[j+2] = pattern10[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du onzième niveau
  for (int i = 0; i < pattern11.length; i += 4) {
    pattern_n11[j] = pattern11[i];
    pattern_n11[j+1] = (displayHeight-50)/pattern11[i+1];
    pattern_n11[j+1] *= pattern11[i+2];
    pattern_n11[j+2] = pattern11[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du douzième niveau
  for (int i = 0; i < pattern12.length; i += 4) {
    pattern_n12[j] = pattern12[i];
    pattern_n12[j+1] = (displayHeight-50)/pattern12[i+1];
    pattern_n12[j+1] *= pattern12[i+2];
    pattern_n12[j+2] = pattern12[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du treizième niveau
  for (int i = 0; i < pattern13.length; i += 4) {
    pattern_n13[j] = pattern13[i];
    pattern_n13[j+1] = (displayHeight-50)/pattern13[i+1];
    pattern_n13[j+1] *= pattern13[i+2];
    pattern_n13[j+2] = pattern13[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du quatorzième niveau
  for (int i = 0; i < pattern14.length; i += 4) {
    pattern_n14[j] = pattern14[i];
    pattern_n14[j+1] = (displayHeight-50)/pattern14[i+1];
    pattern_n14[j+1] *= pattern14[i+2];
    pattern_n14[j+2] = pattern14[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du quinzième niveau
  for (int i = 0; i < pattern15.length; i += 4) {
    pattern_n15[j] = pattern15[i];
    pattern_n15[j+1] = (displayHeight-50)/pattern15[i+1];
    pattern_n15[j+1] *= pattern15[i+2];
    pattern_n15[j+2] = pattern15[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du seizième niveau
  for (int i = 0; i < pattern16.length; i += 4) {
    pattern_n16[j] = pattern16[i];
    pattern_n16[j+1] = (displayHeight-50)/pattern16[i+1];
    pattern_n16[j+1] *= pattern16[i+2];
    pattern_n16[j+2] = pattern16[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du dix-septième niveau
  for (int i = 0; i < pattern17.length; i += 4) {
    pattern_n17[j] = pattern17[i];
    pattern_n17[j+1] = (displayHeight-50)/pattern17[i+1];
    pattern_n17[j+1] *= pattern17[i+2];
    pattern_n17[j+2] = pattern17[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du dix-huitième niveau
  for (int i = 0; i < pattern18.length; i += 4) {
    pattern_n18[j] = pattern18[i];
    pattern_n18[j+1] = (displayHeight-50)/pattern18[i+1];
    pattern_n18[j+1] *= pattern18[i+2];
    pattern_n18[j+2] = pattern18[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du dix-neuvième niveau
  for (int i = 0; i < pattern19.length; i += 4) {
    pattern_n19[j] = pattern19[i];
    pattern_n19[j+1] = (displayHeight-50)/pattern19[i+1];
    pattern_n19[j+1] *= pattern19[i+2];
    pattern_n19[j+2] = pattern19[i+3];
    j += 3;
  } 
  j = 0;

  // Initialision du paterne du vingtième niveau
  for (int i = 0; i < pattern20.length; i += 4) {
    pattern_n20[j] = pattern20[i];
    pattern_n20[j+1] = (displayHeight-50)/pattern20[i+1];
    pattern_n20[j+1] *= pattern20[i+2];
    pattern_n20[j+2] = pattern20[i+3];
    j += 3;
  } 
  j = 0;

  // Iniatialisation du premier objet Vaisseau et de la liste de touches
  vaisseau.add(new Vaisseau());
  keys = new boolean[3];
}

void draw() {
  // Si le joueur n'est pas en jeu, afficher l'arrière plan des menus et le titre "COUT ET CIN"
  if (!ingame) {
    noStroke();
    imageMode(CENTER);
    image(menu_background, width/2, height/2);

    if (titre_boucle > 8) titre_boucle = 0;
    image(titre_tab[titre_boucle], width/2, height/6, 0.8*width, height/5);

    if (frameCount > 2) {
      titre_boucle++;
      frameCount = 0;
    }
  }

  // Si la fenêtre actuelle est le menu
  if (menu) {
    son_musique_enervee.pause();
    son_musique.pause();

    // Affichage des cadres de boutons
    fill(200, 200, 255, 100);
    rect(width/4, 0.3*height, width/2, height/6);
    rect(width/4, 0.5*height, width/2, height/6);
    rect(width/4, 0.7*height, width/2, height/6);
    textFont(police);

    // Affichage des boutons "JOUER", "AIDE" et "QUITTER" (rang[0]), avec une surbrillance lors du passage de la souris (rang[1])
    if (mouseX >= width/4 && mouseX <= 3*width/4 && mouseY >= 0.3*height && mouseY <= 28*height/60) image(jouer_tab[1], width/2, 23*height/60, width/3.5, height/6);
    else image(jouer_tab[0], width/2, 23*height/60, width/3.5, height/6);
    if (mouseX >= width/4 && mouseX <= 3*width/4 && mouseY >= 0.5*height && mouseY <= 2*height/3) image(aide_tab[1], width/2, 7*height/12, width/4, height/6);
    else image(aide_tab[0], width/2, 7*height/12, width/4, height/6);
    if (mouseX >= width/4 && mouseX <= 3*width/4 && mouseY >= 0.7*height && mouseY <= 52*height/60) image(quitter_tab[1], width/2, 47*height/60, width/3, height/6);
    else image(quitter_tab[0], width/2, 47*height/60, width/3, height/6);
  }

  // Si la fenêtre actuelle est celle des niveaux
  if (niveaux) {
    affichageniveau_boucle = 1;
    fill(200, 200, 255, 100);

    // Affichage de chaque cadre bouton associé à un niveau
    for (int y = 19*height/66; y <17*height/20; y += height/6) {
      for (int x = 4*width/27; x < 23*width/27; x += 4*width/27) {
        stroke((int)random(255), (int)random(255), (int)random(255));
        fill(0, 0, 0, 150);
        rect(x, y, width/8, height/7);
        fill(200);
        textAlign(CENTER);
        textSize(height/14);
        text(affichageniveau_boucle, x + 7*width/112, y + 2*height/21);
        affichageniveau_boucle++;
      }
    }
  }

  // Si la fenêtre actuelle est l'aide
  if (aide) {
    image(instructions, width/2, height*5/8);
  }

  // Si la fenêtre actuelle est l'aide ou celle des niveaux
  if (aide || niveaux) {
    // Affichage d'un cadre de bouton
    noStroke();
    fill(200, 200, 255, 100);
    rect(width/45, 66*height/72, width/12, height/15);

    // Affichage du bouton "MENU" (rang[0]), avec une surbrillance lors du passage de la souris (rang[1])
    if (mouseX >= width/45 && mouseX <= 19*width/180 && mouseY >= 66*height/72 && mouseY <= 59*height/60) image(menu_tab[1], width/15, 19*height/20, width/15, height/19);
    else image(menu_tab[0], width/15, 19*height/20, width/15, height/19);
  }

  // Si le joueur est en jeu ou vient tout juste de perdre
  if (ingame || defaite) {
    imageMode(CORNER);

    // Toute les deux frames
    if (frameCount > 1) {
      frame_sprite++;
      frameCount = 0;

      // Deplacement des plans en différé
      background_width += 4;
      foreground_width += 6;
    }

    // Bouclage des deux plans pour assurer leur continuité
    if (background_width >= ceil(width * dimension)-width) background_width = ceil(ceil(width*dimension)/3.555208333-width);
    background = long_background.get(background_width, 0, width, height);
    if (foreground_width >= ceil(width * dimension)-width) foreground_width = ceil(ceil(width*dimension)/3.555208333-width);
    foreground = long_foreground.get(foreground_width, 0, width, height);

    // Affichage des deux plans
    background(background);
    image(foreground, 0, 0);
  }

  // Si le jouer est en jeu
  if (ingame) {
    // S'il vient de perdre ou va au niveau suivant, réinitialisation du jeu
    if (precedente_defaite || rejouer) {
      assaillants.clear();
      vaisseau.clear();
      tirs.clear();
      vaisseau.add(new Vaisseau());

      seconde = 0;
      rejouer = false;
      precedente_defaite = false;
    }

    fill(255);
    textAlign(CENTER);
    textSize(height/20);
    text(text_niveau, 9*width/10, height/10);

    // Variables récupérées dans l'animation alternative des propulseurs de vaisseaux
    if (frame_sprite > 5) {
      v_boucle++;
      a_boucle++;
      frame_sprite = 0;
    }
    if (a_boucle > 1) a_boucle = 0;
    if (v_boucle > 1) v_boucle = 0;

    // Rafraîchissement du compteur de secondes
    if (frame == 60) {
      seconde +=1;
      frame = 0;
    } 
    frame += 1;

    // Affichage et déplacement de l'objet "Vaisseau"
    vaisseau.get(0).affichage();
    vaisseau.get(0).deplacement();

    // Affichage des tirs
    if (tirs.size() != 0) {
      for (int i = 0; i < tirs.size(); i++) tirs.get(i).affichage(i);
    }

    // Génération des objets "Assaillant"
    generation();

    // Affichage et vérification de collision de chaque assaillant
    if (assaillants.size() != 0) {
      for (int i = 0; i < assaillants.size(); i++) {
        assaillants.get(i).affichage();
        assaillants.get(i).collision(i);
      }
    }
    // Si tous les vaisseaux du paterne sont tués, il y a victoire
    if (objectif == 0) victoire = true;
  }

  // Si le joueur perd, affichage de l'écran de défaite
  if (defaite) {
    imageMode(CENTER);
    textAlign(CENTER);
    textSize(height/8);

    // Affichage des cadres de boutons
    fill(0, 150);
    rect(0, 0, width, height);
    fill(0, 200);
    rect(3*width/8, 11*height/16, width/4, height/8);
    rect(3*width/8, height/2, width/4, height/8);

    // Affichage des boutons "REJOUER" et "MENU" (rang[0]), avec une surbrillance lors du passage de la souris (rang[1])
    if (mouseX >= 3*width/8 && mouseX <= 5*width/8 && mouseY >= 11*height/16 && mouseY <= 13*height/16) image(menu_tab[1], width/2, 3*height/4, width/8, height/9);
    else image(menu_tab[0], width/2, 3*height/4, width/8, height/9);
    if (mouseX >= 3*width/8 && mouseX <= 5*width/8 && mouseY >= height/2 && mouseY <= 5*height/8) image(rejouer_tab[1], width/2, 9*height/16, width/5, height/9);
    else image(rejouer_tab[0], width/2, 9*height/16, width/5, height/9);

    fill((int)random(255),0,0);
    text("Vous avez perdu", width/2, height/4);
  }

  // Si le joueur gagne, affichage de l'écran de victoire
  if (victoire) {
    imageMode(CENTER);
    textAlign(CENTER);
    textSize(height/8);

    // Affichage des cadres de boutons
    fill(0, 150);
    rect(0, 0, width, height);
    fill(0, 200);
    rect(3*width/8, 11*height/16, width/4, height/8);
    rect(3*width/8, height/2, width/4, height/8);

    // Affichage des boutons "MENU" et "SUIVANT" (rang[0]), avec une surbrillance lors du passage de la souris (rang[1])
    if (mouseX >= 3*width/8 && mouseX <= 5*width/8 && mouseY >= 11*height/16 && mouseY <= 13*height/16) image(menu_tab[1], width/2, 3*height/4, width/8, height/9);
    else image(menu_tab[0], width/2, 3*height/4, width/8, height/9);
    if (mouseX >= 3*width/8 && mouseX <= 5*width/8 && mouseY >= height/2 && mouseY <= 5*height/8) image(suivant_tab[1], width/2, 9*height/16, width/5, height/9);
    else image(suivant_tab[0], width/2, 9*height/16, width/5, height/9);

    fill((int)random(255), (int)random(255), (int)random(255));
    text("Vous avez gagné", width/2, height/4);
  }
}

// Sous-programme d'assignation de paterne en fonction du niveau, déduction du nombre d'objets "Assaillant" à tuer
void assignation(int niveau) {
  niveaux = false;
  ingame = true;
  son_musique_enervee.rewind();
  son_musique_enervee.pause();
  son_musique.rewind();
  son_musique.loop();

  switch(niveau) {
  case 1:
    pattern_n = pattern_n01;
    objectif = 10;
    text_niveau = "Niveau 1";
    break;
  case 2:
    pattern_n = pattern_n02;
    objectif = 15;
    text_niveau = "Niveau 2";
    break;
  case 3:
    pattern_n = pattern_n03;
    objectif = 20;
    text_niveau = "Niveau 3";
    break;
  case 4:
    pattern_n = pattern_n04;
    objectif = 25;
    text_niveau = "Niveau 4";
    break;
  case 5:
    pattern_n = pattern_n05;
    objectif = 30;
    text_niveau = "Niveau 5";
    break;
  case 6:
    pattern_n = pattern_n06;
    objectif = 35;
    text_niveau = "Niveau 6";
    break;
  case 7:
    pattern_n = pattern_n07;
    objectif = 40;
    text_niveau = "Niveau 7";
    break;
  case 8:
    pattern_n = pattern_n08;
    objectif = 50;
    text_niveau = "Niveau 8";
    break;
  case 9:
    pattern_n = pattern_n09;
    objectif = 60;
    text_niveau = "Niveau 9";
    break;
  case 10:
    pattern_n = pattern_n10;
    objectif = 70;
    text_niveau = "Niveau 10";
    break;
  case 11:
    pattern_n = pattern_n11;
    objectif = 80;
    text_niveau = "Niveau 11";
    break;
  case 12:
    pattern_n = pattern_n12;
    objectif = 90;
    text_niveau = "Niveau 12";
    break;
  case 13:
    pattern_n = pattern_n13;
    objectif = 105;
    text_niveau = "Niveau 13";
    break;
  case 14:
    pattern_n = pattern_n14;
    objectif = 115;
    text_niveau = "Niveau 14";
    break;
  case 15:
    pattern_n = pattern_n15;
    objectif = 130;
    text_niveau = "Niveau 15";
    break;
  case 16:
    pattern_n = pattern_n16;
    objectif = 150;
    text_niveau = "Niveau 16";
    break;
  case 17:
    pattern_n = pattern_n17;
    objectif = 165;
    text_niveau = "Niveau 17";
    break;
  case 18:
    pattern_n = pattern_n18;
    objectif = 185;
    text_niveau = "Niveau 18";
    break;
  case 19:
    pattern_n = pattern_n19;
    objectif = 200;
    text_niveau = "Niveau 19";
    break;
  case 20:
    pattern_n = pattern_n20;
    objectif = 300;
    text_niveau = "Niveau 20";
    son_musique.pause();
    son_musique_enervee.loop();
    break;
  }
}

// Génération d'objets "Assaillant" si le temps de jeu correspond à un instant d'apparation dans le paterne
void generation() {
  for (int i = 0; i < pattern_n.length; i+=3)
    if (frame == 1 && seconde == pattern_n[i]) assaillants.add(new Assaillant(pattern_n[i+1], pattern_n[i+2]));
}

// Si une touche est appuyée, alors une variable est changée
void keyPressed() {
  if (key == 'e' || key == 'E') keys[0] = true;
  if (key == 'c' || key == 'C') keys[1] = true;  
  if (key == ' ') keys[2] = true;
}

// Si une touche est relâchée, alors une variable est changée
void keyReleased() {
  if (key == 'e' || key == 'E') keys[0] = false;
  if (key == 'c' || key == 'C') keys[1] = false;
  if (key == ' ') keys[2] = false;
}

// Si la souris est appuyée puis relâchée
void mouseReleased() {
  son_click.play(tirs.size());

  // Si le joueur est dans la fenêtre de niveaux
  if (niveaux) {
    if (mouseX >= 4*width/27 && mouseX <= 59*width/216 && mouseY >= 19*height/66 && mouseY <= 199*width/462) niveau = 1;
    if (mouseX >= 8*width/27 && mouseX <= 91*width/216 && mouseY >= 19*height/66 && mouseY <= 199*width/462) niveau = 2;
    if (mouseX >= 12*width/27 && mouseX <= 59*width/108 && mouseY >= 19*height/66 && mouseY <= 199*width/462) niveau = 3;
    if (mouseX >= 16*width/27 && mouseX <= 145*width/216 && mouseY >= 19*height/66 && mouseY <= 199*width/462) niveau = 4;
    if (mouseX >= 20*width/27 && mouseX <= 43*width/54 && mouseY >= 19*height/66 && mouseY <= 199*width/462) niveau = 5;
    if (mouseX >= 4*width/27 && mouseX <= 59*width/216 && mouseY >= 5*height/11 && mouseY <= 46*width/77) niveau = 6;
    if (mouseX >= 8*width/27 && mouseX <= 91*width/216 && mouseY >= 5*height/11 && mouseY <= 46*width/77) niveau = 7;
    if (mouseX >= 12*width/27 && mouseX <= 59*width/108 && mouseY >= 5*height/11 && mouseY <= 46*width/77) niveau = 8;
    if (mouseX >= 16*width/27 && mouseX <= 145*width/216 && mouseY >= 5*height/11 && mouseY <= 46*width/77) niveau = 9;
    if (mouseX >= 20*width/27 && mouseX <= 43*width/54 && mouseY >= 5*height/11 && mouseY <= 46*width/77) niveau = 10;
    if (mouseX >= 4*width/27 && mouseX <= 59*width/216 && mouseY >= 41*height/66 && mouseY <= 353*width/462) niveau = 11;
    if (mouseX >= 8*width/27 && mouseX <= 91*width/216 && mouseY >= 41*height/66 && mouseY <= 353*width/462) niveau = 12;
    if (mouseX >= 12*width/27 && mouseX <= 59*width/108 && mouseY >= 41*height/66 && mouseY <= 353*width/462) niveau = 13;
    if (mouseX >= 16*width/27 && mouseX <= 145*width/216 && mouseY >= 41*height/66 && mouseY <= 353*width/462) niveau = 14;
    if (mouseX >= 20*width/27 && mouseX <= 43*width/54 && mouseY >= 41*height/66 && mouseY <= 353*width/462) niveau = 15;
    if (mouseX >= 4*width/27 && mouseX <= 59*width/216 && mouseY >= 26*height/33 && mouseY <= 215*width/231) niveau = 16;
    if (mouseX >= 8*width/27 && mouseX <= 91*width/216 && mouseY >= 26*height/33 && mouseY <= 215*width/231) niveau = 17;
    if (mouseX >= 12*width/27 && mouseX <= 59*width/108 && mouseY >= 26*height/33 && mouseY <= 215*width/231) niveau = 18;
    if (mouseX >= 16*width/27 && mouseX <= 145*width/216 && mouseY >= 26*height/33 && mouseY <= 215*width/231) niveau = 19;
    if (mouseX >= 20*width/27 && mouseX <= 43*width/54 && mouseY >= 26*height/33 && mouseY <= 215*width/231) niveau = 20;
    assignation(niveau);
  }

  // Si le joueur est dans le menu
  if (menu) {
    if (mouseX >= width/4 && mouseX <= 3*width/4 && mouseY >= 0.3*height && mouseY <= 28*height/60) {
      son_click.play(tirs.size());
      menu = false;
      niveaux = true;
    }

    if (mouseX >= width/4 && mouseX <= 3*width/4 && mouseY >= 0.5*height && mouseY <= 2*height/3) {
      son_click.play(tirs.size());
      menu = false;
      aide = true;
    }
    if (mouseX >= width/4 && mouseX <= 3*width/4 && mouseY >= 0.7*height && mouseY <= 52*height/60) exit();
  }

  // Si le joueur n'est ni en jeu, ni dans le menu
  if (!ingame && !menu) {
    if (mouseX >= width/45 && mouseX <= 19*width/180 && mouseY >= 66*height/72 && mouseY <= 59*height/60) {
      son_click.play(tirs.size());
      menu = true;
      aide = false;
      niveaux = false;
    }
  }

  // Si le joueur perd
  if (defaite) {
    if (mouseX >= 3*width/8 && mouseX <= 5*width/8 && mouseY >= height/2 && mouseY <= 5*height/8) {
      son_click.play(tirs.size());
      assignation(niveau);
      defaite = false;
      rejouer = true;
      ingame = true;
    }

    if (mouseX >= 3*width/8 && mouseX <= 5*width/8 && mouseY >= 11*height/16 && mouseY <= 13*height/16) {
      son_click.play(tirs.size());
      menu = true;
      defaite = false;
      ingame = false;
      precedente_defaite = true;
    }
  }

  // Si le joueur gagne
  if (victoire) {
    if (mouseX >= 3*width/8 && mouseX <= 5*width/8 && mouseY >= height/2 && mouseY <= 5*height/8) {
      son_click.play(tirs.size());
      niveau++;
      assignation(niveau);
      ingame = true;
      rejouer = true;
      victoire = false;
    }

    if (mouseX >= 3*width/8 && mouseX <= 5*width/8 && mouseY >= 11*height/16 && mouseY <= 13*height/16) {
      son_click.play(tirs.size());
      menu = true;
      ingame = false;
      victoire = false;
    }
  }
}
