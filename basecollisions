int sum_collision = 0;
int sol = 500;
int saut = 20;
int initspeed = 20;
int speed1, speed2 = initspeed;
int gravity = 1;

boolean keys[];
boolean saut1 = false, saut2 = false;

int p1width = 30, p1height = 30, p1x = 10, p1y = sol - p1width;
int p2width = 30, p2height = 30, p2x = 50, p2y = sol - p2width;

void setup(){
  size(800, 600);
  keys = new boolean[8];
}

void draw(){
  background(255);
  frameRate(120);
  
  // Plateforme
  fill(0);
  noStroke();
  rect(0, sol, width, 100);
  
  // Joueur 1, bleu
  fill(0, 0, 255);
  noStroke();
  rect(p1x, p1y, p1width, p1height);
  
  // Joueur 2, vert
  fill(0, 255, 0);
  noStroke();
  rect(p2x, p2y, p2width, p2height);
  
  deplacement();
  sol();
  mur();
  gravite();
  
  // Affichage
  textSize(20);
  text(gravity, 10, 20);
  text(speed1, 10, 40);
  text(speed2, 10, 60);
}

void keyPressed(){
// Joueur 1 //
  if(key == 'q') keys[0] = true;  // LEFT
  if(key == 'd') keys[1] = true;  // RIGHT
  if(key == 'z') keys[2] = true;  // UP
  if(key == 's') keys[3] = true;  // DOWN

// Joueur 2 //
  if(key == 'k') keys[4] = true;  // LEFT
  if(key == 'm') keys[5] = true;  // RIGHT
  if(key == 'o') keys[6] = true;  // UP
  if(key == 'l') keys[7] = true;  // DOWN
}

void keyReleased(){
// Joueur 1 //
  if(key == 'q') keys[0] = false;
  if(key == 'd') keys[1] = false;
  if(key == 'z') keys[2] = false;
  if(key == 's') keys[3] = false;
  
// Joueur 2 //
  if(key == 'k') keys[4] = false;
  if(key == 'm') keys[5] = false;
  if(key == 'o') keys[6] = false;
  if(key == 'l') keys[7] = false; 
}

void deplacement() { 
 if (keys[0] && verifCollisionLeft1() == 0) p1x--; 
 if (keys[1] && verifCollisionRight1() == 0) p1x++; 
 if (keys[2] && verifCollisionUp1() == 0) saut1 = true;
 if (keys[3] && verifCollisionDown1() == 0) p1y++;
 if (keys[4] && verifCollisionLeft2() == 0) p2x--;
 if (keys[5] && verifCollisionRight2() == 0) p2x++;
 if (keys[6] && verifCollisionUp2() == 0) saut2 = true;
 if (keys[7] && verifCollisionDown2() == 0) p2y++; 
}

void sol(){
  if(p1y + p1height >= sol){
    p1y = sol - p1height;
  }
  if(p2y + p2height >= sol){
    p2y = sol - p2height;
  }
}

void mur(){
  if(p1x <= 0) p1x = 0;
  if(p2x <= 0) p2x = 0;
  if(p1x + p1width >= width) p1x = width - p1width;
  if(p2x + p2width >= width) p2x = width - p2width;
}

void gravite(){
  if(saut1){
    p1y -= speed1;
    if(p1y >= sol - p1height){
      p1y = sol - p1height;
      speed1 = initspeed;
      saut1 = false;
    } else {
      speed1 -= gravity;
    }
  }
  
  if(saut2){
    p2y -= speed2;
    if(p2y >= sol - p2height){
      p2y = sol - p2height;
      speed2 = initspeed;
      saut2 = false;
    } else {
      speed2 -= gravity;
    }
  }
}

int verifSuperposition(){
  for(int x1 = p1x; x1 < p1x + p1width; x1++)
    for(int y1 = p1y; y1 < p1y + p1height; y1++)
      for(int x2 = p2x; x2 < p2x + p2width; x2++)
        for(int y2 = p2y; y2 < p2y + p2height; y2++)
          if(x1 == x2 && y1 == y2) sum_collision++;
  return sum_collision;
}

int verifAlignement(){
  for(int x1 = p1x; x1 < p1x + p1width; x1++)
    for(int x2 = p2x; x2 < p2x + p2width; x2++)
      if(x1 == x2) sum_collision++;
  return sum_collision;
}

void superposition(){
  if(verifSuperposition() != 0 && verifAlignement() != 0) p1y = sol - p1height - p2height;
}

int verifCollisionLeft1(){
  sum_collision = 0;
  for(int y1 = p1y; y1 < p1y + p1height; y1++){
    for(int y2 = p2y; y2 < p2y + p2height; y2++){
      if(p1x == p2x+p2width && y1 == y2) sum_collision++;
    }
  }
  return sum_collision;
}

int verifCollisionRight1(){
  sum_collision = 0;
  for(int y1 = p1y; y1 < p1y + p1height; y1++){
    for(int y2 = p2y; y2 < p2y + p2height; y2++){
      if(p1x+p1width == p2x && y1 == y2) sum_collision++;
    }
  }
  return sum_collision;
}

int verifCollisionUp1(){
  sum_collision = 0;
  for(int x1 = p1x; x1 < p1x + p1width; x1++){
    for(int x2 = p2x; x2 < p2x + p2width; x2++){
      if(p1y == p2y+p2height && x1 == x2) sum_collision++;
    }
  }
  return sum_collision;
}

int verifCollisionDown1(){
  sum_collision = 0;
  for(int x1 = p1x; x1 < p1x + p1width; x1++){
    for(int x2 = p2x; x2 < p2x + p2width; x2++){
      if(p1y+p1height == p2y && x1 == x2) sum_collision++;
    }
  }
  return sum_collision;
}

int verifCollisionLeft2(){
  sum_collision = 0;
  for(int y2 = p2y; y2 < p2y + p2height; y2++){
    for(int y1 = p1y; y1 < p1y + p1height; y1++){
      if(p2x == p1x+p1width && y1 == y2) sum_collision++;
    }
  }
  return sum_collision;
}

int verifCollisionRight2(){
  sum_collision = 0;
  for(int y2 = p2y; y2 < p2y + p2height; y2++){
    for(int y1 = p1y; y1 < p1y + p1height; y1++){
      if(p2x+p2width == p1x && y1 == y2) sum_collision++;
    }
  }
  return sum_collision;
}

int verifCollisionUp2(){
  sum_collision = 0;
  for(int x2 = p2x; x2 < p2x + p2width; x2++){
    for(int x1 = p1x; x1 < p1x + p1width; x1++){
      if(p2y == p1y+p1height && x1 == x2) sum_collision++;
    }
  }
  return sum_collision;
}

int verifCollisionDown2(){
  sum_collision = 0;
  for(int x2 = p2x; x2 < p2x + p2width; x2++){
    for(int x1 = p1x; x1 < p1x + p1width; x1++){
      if(p2y+p2height == p1y && x1 == x2) sum_collision++;
    }
  }
  return sum_collision;
}
